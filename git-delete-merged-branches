#!/usr/bin/env python3
import argparse
import subprocess
import sys
from typing import List


def merged_branches() -> List[str]:
    proc = subprocess.run(['git', 'branch', '--merged'], stdout=subprocess.PIPE)
    if proc.returncode != 0:
        raise Exception("Failed 'git branch --merged'")

    output = proc.stdout.decode('utf-8')

    branches: List[str] = []
    for line in output.splitlines():
        if line.startswith('*'): # current branch
            continue

        branches.append(line.strip())

    return branches


def filter_branches(branches: List[str]) -> List[str]:
    white_list = ['master', 'develop']
    return [branch for branch in branches if branch not in white_list]


def main() -> None:
    parser = argparse.ArgumentParser(description='Delete merged git branches')
    parser.add_argument('-d', '--dry-run', action='store_true', default=False, dest='dry_run')
    args = parser.parse_args()

    branches = merged_branches()
    if len(branches) == 0:
        print('There is no merged branch')
        return

    deleting_branches = filter_branches(branches)
    if len(branches) == 0:
        print('There is no deletable branch')
        return

    if args.dry_run:
        print("Dry run")

    for branch in deleting_branches:
        print(f'Delete {branch}')

        if args.dry_run:
            continue

        proc = subprocess.run(['git', 'branch', '-d', branch])
        if proc.returncode == 0:
            print(f"Failed to delete 'f{branch}'", file=sys.stderr)
            return

    print(f'Delete {len(deleting_branches)} branches')


if __name__ == '__main__':
    main()
