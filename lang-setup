#!/usr/bin/env python3
import os
import re
import subprocess
import sys
from pathlib import Path
from typing import List


def is_c_like_language(lang: str) -> bool:
    return re.match(r'(?:c|c\+\+|objc)$', lang.lower()) is not None


def is_js_like_language(lang: str) -> bool:
    return re.match(r'(?:|js|node(?:js)|ts|typescript)$', lang.lower()) is not None


def generate_clang_format():
    if Path('.clang-format').exists():
        return

    clang_format = r'''
BasedOnStyle: LLVM
IndentWidth: 4
ColumnLimit: 132
SortIncludes: false
AllowShortFunctionsOnASingleLine: None
AlwaysBreakTemplateDeclarations: Yes
'''
    with open('.clang-format', 'w', encoding='utf-8') as f:
        f.write(clang_format.lstrip())

    print('Generate .clang-format')


def setup_c(lang: str):
    print(f'Setup for {lang} language')

    generate_clang_format()


def npm_init():
    proc = subprocess.run(['npm', 'init', '-y'])
    if proc.returncode == 0:
        print("Failed 'npm init -y'")
        return

    print('npm init')


def generate_prettier():
    if Path('.prettierrc').exists():
        return

    config = r'''
{
  "semi": false,
  "singleQuote": true,
  "endOfLine": "lf",
  "trailingComma": "all",
  "printWidth": 120,
  "tabWidth": 2
}
'''
    with open('.prettierrc', 'w', encoding='utf-8') as f:
        f.write(config)

    print("Generate .prettierrc")


def typescript_init():
    commands = [
        ['npm', 'install', '-D', 'typescript'],
        ['npx', 'tsc', '--init'],
    ]

    for cmd in commands:
        proc = subprocess.run(cmd)
        if proc.returncode != 0:
            print(f'Failed to executed "{cmd}"', file=sys.stderr)
            return


def setup_js(lang: str):
    if Path('package.json').exists():
        return

    npm_init()
    if lang == "typescript":
        typescript_init()

    generate_prettier()


def generate_gitignore(langs: List[str]):
    if Path('.gitignore').exists():
        return

    # I got error by using urllib.request. I use curl instead of it
    url = 'https://www.gitignore.io/api/{}'.format('%2C'.join(langs))
    command = ['curl', '-L', '-o', '.gitignore', '--silent', url]
    proc = subprocess.run(command)
    if proc.returncode != 0:
        print('Failed to download .gitignore', file=sys.stderr)
        return

    print('Generate .gitignore')


def generate_readme_md():
    if Path('README.md').exists():
        return

    print('Generate README.md')
    with open('README.md', 'w') as f:
        f.write('# ')


def setup_cmake():
    if Path('CMakeLists.txt').exists():
        return

    print('Generate CMakeLists.txt')

    cur_dir = Path(os.getcwd()).name
    cmake = fr'''
CMAKE_MINIMUM_REQUIRED(VERSION 3.5)

PROJECT({cur_dir})

ENABLE_LANGUAGE(CXX)
SET(CMAKE_CXX_STANDARD 14)
SET(CMAKE_CXX_STANDARD_REQUIRED ON)
SET(CMAKE_CXX_EXTENSIONS OFF)

SET(CMAKE_CXX_FLAGS "-Wall ${{CMAKE_CXX_FLAGS}}")
'''
    with open('CMakeLists.txt', 'w', encoding='utf-8') as f:
        f.write(cmake.lstrip())


def setup_mit_license():
    if Path('LICENSE').exists():
        return

    now = datetime.now()
    license_text = fr'''Copyright {now.year} Shohei YOSHIDA

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
'''

    print('Generate LICENSE')

    with open('LICENSE', 'w', encoding='utf-8') as f:
        f.write(license_text)


def main():
    if len(sys.argv) < 2:
        print('Usage: lang-setup language')
        sys.exit(1)

    gitignore_langs: List[str] = []
    for lang in sys.argv[1:]:
        if is_c_like_language(lang):
            setup_c(lang)
        elif is_js_like_language(lang):
            setup_js(lang)
        elif lang.lower() == 'cmake':
            setup_cmake()
        elif lang.lower() == 'mit':
            setup_mit_license()
            continue

        gitignore_langs.append(lang)

    generate_gitignore(gitignore_langs)

    generate_readme_md()


if __name__ == '__main__':
    main()
