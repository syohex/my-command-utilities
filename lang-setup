#!/usr/bin/env python3
import os
import platform
import re
import subprocess
import sys
from datetime import datetime
from pathlib import Path
from typing import List, NoReturn


def is_c_like_language(lang: str) -> bool:
    return re.match(r'(?:c|c\+\+|objc)$', lang) is not None


def is_js_like_language(lang: str) -> bool:
    return re.match(r'(?:|js|node(?:js)|ts|typescript)$', lang) is not None


def generate_clang_format() -> NoReturn:
    if Path('.clang-format').exists():
        return

    clang_format = r'''
BasedOnStyle: LLVM
IndentWidth: 4
ColumnLimit: 132
SortIncludes: false
AllowShortFunctionsOnASingleLine: None
AlwaysBreakTemplateDeclarations: Yes
'''
    with open('.clang-format', 'w', encoding='utf-8') as f:
        f.write(clang_format.lstrip())

    print('Generate .clang-format')


def setup_c(lang: str) -> NoReturn:
    print(f'Setup for {lang} language')

    generate_clang_format()


def git_init(args: List[str]) -> NoReturn:
    if 'git' in args:
        proc = subprocess.run(['git', 'init'])
        if proc.returncode != 0:
            raise Exception("Failed 'git init")

        print('git init')

    if 'syohex' in args:
        commands = [
            ['git', 'config', 'user.name', 'Shohei YOSHIDA'],
            ['git', 'config', 'user.email', 'syohex@gmail.com'],
        ]

        for cmd in commands:
            if subprocess.run(cmd).returncode != 0:
                raise Exception("Failed '{}'".format(' '.join(cmd)))

            print(' '.join(cmd))

    if any([arg.startswith('gitattr') for arg in args]):
        generate_gitattributes(args)


def npm_init() -> NoReturn:
    proc = subprocess.run(['npm', 'init', '-y'])
    if proc.returncode == 0:
        raise Exception("Failed 'npm init -y'")

    print('npm init')


def generate_prettier() -> NoReturn:
    if Path('.prettierrc').exists():
        return

    config = r'''
{
  "semi": true,
  "singleQuote": true,
  "endOfLine": "lf",
  "trailingComma": "all",
  "printWidth": 120,
  "tabWidth": 2
}
'''
    with open('.prettierrc', 'w', encoding='utf-8') as f:
        f.write(config)

    print("Generate .prettierrc")


def typescript_init() -> NoReturn:
    commands = [
        ['npm', 'install', '-D', 'typescript'],
        ['npx', 'tsc', '--init'],
    ]

    for cmd in commands:
        proc = subprocess.run(cmd)
        if proc.returncode != 0:
            print(f'Failed to executed "{cmd}"', file=sys.stderr)
            return

    print("Success typescript initialization")


def setup_js(lang: str) -> NoReturn:
    if Path('package.json').exists():
        return

    npm_init()
    if lang == "typescript":
        typescript_init()

    generate_prettier()


def go_version() -> str:
    proc = subprocess.run(['go', 'version'], stdout=subprocess.PIPE)
    if proc.returncode != 0:
        raise Exception('Please install go')

    output = proc.stdout.decode('utf-8')
    match = re.match(r'go version go(\d+\.\d+)(\.\d+)?', output)
    if match is None:
        raise Exception('Could not found go version via "go version"')

    return match.group(1)


def setup_golang() -> NoReturn:
    if Path('go.mod').exists():
        return

    try:
        this_module = str(Path.cwd().relative_to(Path(os.getenv('GOPATH'), 'src')))
        if platform.system() == 'Windows':
            # the path in go.mod must be UNIX style
            this_module = this_module.replace('\\', '/')
    except ValueError:
        raise Exception(f'{str(Path.cwd())} is not in GOPATH')

    version = go_version()

    go_mod = f'''module {this_module}

go {version}
'''

    with open('go.mod', 'w', encoding='utf-8') as f:
        f.write(go_mod)

    print("Generate go.mod")


def generate_gitignore(langs: List[str]) -> NoReturn:
    if Path('.gitignore').exists():
        return

    # I got error by using urllib.request. I use curl instead of it
    url = 'https://www.gitignore.io/api/{}'.format('%2C'.join(langs))
    command = ['curl', '-L', '-o', '.gitignore', '--silent', url]
    proc = subprocess.run(command)
    if proc.returncode != 0:
        print('Failed to download .gitignore', file=sys.stderr)
        return

    print('Generate .gitignore')


def generate_gitattributes(args: List[str]) -> NoReturn:
    if Path('.gitattributes').exists():
        return

    lines = ['* text=auto']

    if any([arg == 'go' or arg == 'golang' for arg in args]):
        lines.append('')
        lines.append('*.go text eol=lf')
        lines.append('go.mod text eol=lf')
        lines.append('go.sum text eol=lf')

    if any([arg == 'c#' or arg == 'csharp' for arg in args]):
        lines.append('')
        lines.append('*.cs text eol=crlf')
        lines.append('*.csproj text eol=crlf')

    with open('.gitattributes', 'w', encoding='utf-8') as f:
        content = "\n".join(lines)
        f.write(content)
        f.write("\n")

    print('Generate .gitattributes')


def generate_readme_md() -> NoReturn:
    if Path('README.md').exists():
        return

    with open('README.md', 'w', encoding='utf-8') as f:
        f.write('# ')

    print('Generate README.md')


def setup_cmake() -> NoReturn:
    if Path('CMakeLists.txt').exists():
        return

    print('Generate CMakeLists.txt')

    cur_dir = Path(os.getcwd()).name
    cmake = fr'''
CMAKE_MINIMUM_REQUIRED(VERSION 3.5)

PROJECT({cur_dir})

ENABLE_LANGUAGE(CXX)
SET(CMAKE_CXX_STANDARD 14)
SET(CMAKE_CXX_STANDARD_REQUIRED ON)
SET(CMAKE_CXX_EXTENSIONS OFF)

SET(CMAKE_CXX_FLAGS "-Wall ${{CMAKE_CXX_FLAGS}}")
'''
    with open('CMakeLists.txt', 'w', encoding='utf-8') as f:
        f.write(cmake.lstrip())


def git_name() -> str:
    proc = subprocess.run(['git', 'config', '--global', 'user.name'], stdout=subprocess.PIPE)
    if proc.returncode != 0:
        raise Exception("please check 'user.name' in ~/.gitconfig")

    return proc.stdout.decode('utf-8').strip()


def setup_mit_license() -> NoReturn:
    if Path('LICENSE').exists():
        return

    name = git_name()
    now = datetime.now()
    license_text = fr'''Copyright {now.year} {name}

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
'''

    with open('LICENSE', 'w', encoding='utf-8') as f:
        f.write(license_text)

    print('Generate LICENSE of MIT license')


def setup_gpl_license() -> NoReturn:
    url = 'https://www.gnu.org/licenses/gpl-3.0.txt'
    if subprocess.run(['curl', '-L', '-o', 'COPYING', '--silent', url]).returncode != 0:
        return

    print('Generate COPYING of GPLv3 License')


def usage() -> NoReturn:
    print('''Usage: lang-setup features

Supported features

Languages
- c, c++, objc
- nodejs(js), typescript(ts)

Build tool
- cmake

License
- mit

Git
- git: git initialize
- gitattr: generate .gitattributes
''')


def main() -> NoReturn:
    if len(sys.argv) < 2:
        usage()
        sys.exit(1)

    gitignore_langs: List[str] = []

    git_init(sys.argv[1:])

    for lang in sys.argv[1:]:
        if lang == '--help' or lang == '-h':
            usage()
            sys.exit(0)

        lang = lang.lower()
        if is_c_like_language(lang):
            setup_c(lang)
        elif is_js_like_language(lang):
            setup_js(lang)
        elif lang == 'go' or lang == 'golang':
            setup_golang()
        elif lang == 'cmake':
            setup_cmake()
        elif lang == 'mit':
            setup_mit_license()
            continue
        elif lang.startswith('gpl'):
            setup_gpl_license()
            continue

        gitignore_langs.append(lang)

    if len(gitignore_langs) > 0:
        generate_gitignore(gitignore_langs)

    generate_readme_md()


if __name__ == '__main__':
    main()
